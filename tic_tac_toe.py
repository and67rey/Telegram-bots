import os
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import random
from telebot.apihelper import ApiTelegramException
from dotenv import load_dotenv

load_dotenv('.env')
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

user_sessions = {}
EMPTY_BOARD = [' '] * 9
WIN_COMBINATIONS = [
    (0, 1, 2), (3, 4, 5), (6, 7, 8),
    (0, 3, 6), (1, 4, 7), (2, 5, 8),
    (0, 4, 8), (2, 4, 6)
]

EMOJI_MAP = {' ': '‚¨úÔ∏è', 'X': '‚ùå', 'O': 'üü¢'}

def check_winner(board, symbol):
    return any(all(board[i] == symbol for i in combo) for combo in WIN_COMBINATIONS)

def board_to_markup(board):
    markup = InlineKeyboardMarkup()
    for i in range(0, 9, 3):
        row = []
        for j in range(3):
            idx = i + j
            text = EMOJI_MAP[board[idx]]
            callback_data = str(idx) if board[idx] == ' ' else 'none'
            row.append(InlineKeyboardButton(text, callback_data=callback_data))
        markup.row(*row)
    return markup

def reset_board():
    return [' '] * 9

def ask_play_again(user_id):
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("–î–∞", callback_data='play_again_yes'),
        InlineKeyboardButton("–ù–µ—Ç", callback_data='play_again_no')
    )
    bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?", reply_markup=markup)

def choose_difficulty(user_id):
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("–ù–∞—á–∞–ª—å–Ω—ã–π", callback_data='difficulty_easy'),
        InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callback_data='difficulty_medium'),
        InlineKeyboardButton("–°–ª–æ–∂–Ω—ã–π", callback_data='difficulty_hard')
    )
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=markup)

@bot.message_handler(commands=['start'])
def start_game(message):
    user_id = message.from_user.id
    user_sessions[user_id] = {
        'board': reset_board(),
        'user_symbol': 'X',
        'bot_symbol': 'O',
        'user_wins': 0,
        'bot_wins': 0,
        'in_game': True,
        'message_id': None,
        'difficulty': 'easy'
    }
    choose_difficulty(user_id)

@bot.message_handler(commands=['level'])
def level_command(message):
    user_id = message.from_user.id
    if user_id not in user_sessions:
        user_sessions[user_id] = {
            'board': reset_board(),
            'user_symbol': 'X',
            'bot_symbol': 'O',
            'user_wins': 0,
            'bot_wins': 0,
            'in_game': True,
            'message_id': None,
            'difficulty': 'easy'
        }
    choose_difficulty(user_id)

def start_new_round(user_id):
    session = user_sessions[user_id]
    session['board'] = reset_board()
    coin = random.choice(['–æ—Ä–µ–ª', '—Ä–µ—à–∫–∞'])
    if coin == '—Ä–µ—à–∫–∞':
        text = f"–ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–¥–±—Ä–æ—à–µ–Ω–∞... –í—ã–ø–∞–ª–∞ {coin}!\n–ë–æ—Ç —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º."
        bot_move(user_id)
    else:
        text = f"–ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–¥–±—Ä–æ—à–µ–Ω–∞... –í—ã–ø–∞–ª {coin}!\n–í—ã —Ö–æ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–º."
    msg = bot.send_message(user_id, text, reply_markup=board_to_markup(session['board']))
    session['message_id'] = msg.message_id

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
/start ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–≥—Ä–µ
/quit ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
/level ‚Äî –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

–•–æ–¥—ã —Å–æ–≤–µ—Ä—à–∞—é—Ç—Å—è –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–ª–µ—Ç–∫–∏ –ø–æ–ª—è.
–í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ ‚ùå, –±–æ—Ç ‚Äî –∑–∞ üü¢.

–£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
- –ù–∞—á–∞–ª—å–Ω—ã–π ‚Äî –±–æ—Ç –¥–µ–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ö–æ–¥—ã
- –°—Ä–µ–¥–Ω–∏–π ‚Äî –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: –ø–æ–±–µ–∂–¥–∞–µ—Ç, –±–ª–æ–∫–∏—Ä—É–µ—Ç, –∑–∞–Ω–∏–º–∞–µ—Ç —Ü–µ–Ω—Ç—Ä –∏ —É–≥–ª—ã
- –°–ª–æ–∂–Ω—ã–π ‚Äî –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –ú–∏–Ω–∏–º–∞–∫—Å –∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–π
    """
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['quit'])
def quit_game(message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id)
    if session and (session['user_wins'] > 0 or session['bot_wins'] > 0):
        text = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! üéÆ\n–í–∞—à–∏ –ø–æ–±–µ–¥—ã: {session['user_wins']}\n–ü–æ–±–µ–¥—ã –±–æ—Ç–∞: {session['bot_wins']}\n–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!"
    else:
        text = "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–¥–µ—é—Å—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –º—ã —Å—ã–≥—Ä–∞–µ–º –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É! ‚ú®"
    bot.send_message(user_id, text)
    user_sessions.pop(user_id, None)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call: CallbackQuery):
    user_id = call.from_user.id
    session = user_sessions.get(user_id)

    if call.data == 'play_again_yes':
        bot.answer_callback_query(call.id)
        start_new_round(user_id)
        return

    if call.data == 'play_again_no':
        bot.answer_callback_query(call.id)
        quit_game(call)
        return

    if call.data.startswith('difficulty_'):
        difficulty = call.data.split('_')[1]
        session['difficulty'] = difficulty
        bot.answer_callback_query(call.id)
        start_new_round(user_id)
        return

    if not session or not session['in_game']:
        bot.answer_callback_query(call.id, "–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å /start")
        return

    if call.data == 'none':
        bot.answer_callback_query(call.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥")
        return

    index = int(call.data)
    board = session['board']
    if board[index] != ' ':
        bot.answer_callback_query(call.id, "–ö–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞")
        return

    board[index] = session['user_symbol']
    if check_winner(board, session['user_symbol']):
        session['user_wins'] += 1
        bot.edit_message_text(
            f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ\n–í–∞—à–∏ –ø–æ–±–µ–¥—ã: {session['user_wins']}\n–ü–æ–±–µ–¥—ã –±–æ—Ç–∞: {session['bot_wins']}",
            user_id, session['message_id'],
            reply_markup=board_to_markup(board))
        ask_play_again(user_id)
        return

    if ' ' not in board:
        bot.edit_message_text("–ù–∏—á—å—è! üôÉ", user_id, session['message_id'], reply_markup=board_to_markup(board))
        ask_play_again(user_id)
        return

    bot_move(user_id)
    try:
        bot.edit_message_reply_markup(user_id, session['message_id'], reply_markup=board_to_markup(session['board']))
    except ApiTelegramException as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise

def smart_bot_choice(board, bot_symbol, user_symbol):
    for i in range(9):
        if board[i] == ' ':
            board[i] = bot_symbol
            if check_winner(board, bot_symbol):
                return i
            board[i] = ' '
    for i in range(9):
        if board[i] == ' ':
            board[i] = user_symbol
            if check_winner(board, user_symbol):
                return i
            board[i] = ' '
    if board[4] == ' ':
        return 4
    for i in [0, 2, 6, 8]:
        if board[i] == ' ':
            return i
    for i in [1, 3, 5, 7]:
        if board[i] == ' ':
            return i
    return random.choice([i for i, cell in enumerate(board) if cell == ' '])

def minimax_ab(board, depth, is_maximizing, bot_symbol, user_symbol, alpha, beta):
    if check_winner(board, bot_symbol):
        return 10 - depth
    if check_winner(board, user_symbol):
        return depth - 10
    if ' ' not in board:
        return 0

    if is_maximizing:
        max_eval = -float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = bot_symbol
                eval = minimax_ab(board, depth + 1, False, bot_symbol, user_symbol, alpha, beta)
                board[i] = ' '
                max_eval = max(max_eval, eval)
                alpha = max(alpha, eval)
                if beta <= alpha:
                    break
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(9):
            if board[i] == ' ':
                board[i] = user_symbol
                eval = minimax_ab(board, depth + 1, True, bot_symbol, user_symbol, alpha, beta)
                board[i] = ' '
                min_eval = min(min_eval, eval)
                beta = min(beta, eval)
                if beta <= alpha:
                    break
        return min_eval

def hard_bot_choice(board, bot_symbol, user_symbol):
    best_score = -float('inf')
    move = None
    for i in range(9):
        if board[i] == ' ':
            board[i] = bot_symbol
            score = minimax_ab(board, 0, False, bot_symbol, user_symbol, -float('inf'), float('inf'))
            board[i] = ' '
            if score > best_score:
                best_score = score
                move = i
    return move

def bot_move(user_id):
    session = user_sessions[user_id]
    board = session['board']
    difficulty = session.get('difficulty', 'easy')
    if difficulty == 'medium':
        choice = smart_bot_choice(board, session['bot_symbol'], session['user_symbol'])
    elif difficulty == 'hard':
        choice = hard_bot_choice(board, session['bot_symbol'], session['user_symbol'])
    else:
        available = [i for i, cell in enumerate(board) if cell == ' ']
        choice = random.choice(available)
    board[choice] = session['bot_symbol']
    if check_winner(board, session['bot_symbol']):
        session['bot_wins'] += 1
        bot.edit_message_text(
            f"–ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª! ü§ñ\n–í–∞—à–∏ –ø–æ–±–µ–¥—ã: {session['user_wins']}\n–ü–æ–±–µ–¥—ã –±–æ—Ç–∞: {session['bot_wins']}",
            user_id, session['message_id'],
            reply_markup=board_to_markup(board))
        ask_play_again(user_id)
        return
    if ' ' not in board:
        bot.edit_message_text("–ù–∏—á—å—è! üôÉ", user_id, session['message_id'], reply_markup=board_to_markup(board))
        ask_play_again(user_id)

bot.infinity_polling()
